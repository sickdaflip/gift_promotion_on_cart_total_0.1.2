<?php eval(base64_decode("Y2xhc3MgQml6dGVjaF9Qcm9kdWN0cHJvbW90aW9uX0hlbHBlcl9EYXRhIGV4dGVuZHMgTWFnZV9Db3JlX0hlbHBlcl9BYnN0cmFjdAogICAgewoKICAgICAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0QWxsU3RvcmVEb21haW5zKCkgewogICAgICAgICAgICAkZG9tYWlucyA9IGFycmF5KCk7CiAgICAgICAgICAgIGZvcmVhY2ggKE1hZ2U6OmFwcCgpLT5nZXRXZWJzaXRlcygpIGFzICR3ZWJzaXRlKSB7CiAgICAgICAgICAgICAgICAkdXJsID0gJHdlYnNpdGUtPmdldENvbmZpZygnd2ViL3Vuc2VjdXJlL2Jhc2VfdXJsJyk7CiAgICAgICAgICAgICAgICBpZiAoJGRvbWFpbiA9IHRyaW0ocHJlZ19yZXBsYWNlKCcvXi4qP1wvXC8oLiopP1wvLycsICckMScsICR1cmwpKSkgewogICAgICAgICAgICAgICAgICAgICRkb21haW5zW10gPSAkZG9tYWluOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJHVybCA9ICR3ZWJzaXRlLT5nZXRDb25maWcoJ3dlYi9zZWN1cmUvYmFzZV91cmwnKTsKICAgICAgICAgICAgICAgIGlmICgkZG9tYWluID0gdHJpbShwcmVnX3JlcGxhY2UoJy9eLio/XC9cLyguKik/XC8vJywgJyQxJywgJHVybCkpKSB7CiAgICAgICAgICAgICAgICAgICAgJGRvbWFpbnNbXSA9ICRkb21haW47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGFycmF5X3VuaXF1ZSgkZG9tYWlucyk7CiAgICAgICAgfQoKCiAgICAgICAgcHVibGljIGZ1bmN0aW9uIGNoZWNrS2V5KCRrLCRzID0gJycpeyAgICAKICAgICAgICAgICAgJGNoID0gY3VybF9pbml0KCk7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9VUkwsIHNwcmludGYoJ2h0dHA6Ly9zdG9yZS5iaXp0ZWNoY29uc3VsdGFuY3kuY29tL2V4dGVuc2lvbi9saWNlbmNlLnBocCcpKTsKICAgICAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1QsIHRydWUpOwogICAgICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVEZJRUxEUywgJ2tleT0nLnVybGVuY29kZSgkaykuJyZkb21haW5zPScudXJsZW5jb2RlKGltcGxvZGUoJywnLCAkdGhpcy0+Z2V0QWxsU3RvcmVEb21haW5zKCkpKS4nJnNlYz1wcm9kdWN0cHJvbW90aW9uJyk7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9USU1FT1VULCAzMCk7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgdHJ1ZSk7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9TU0xfVkVSSUZZUEVFUiwgMCk7CiAgICAgICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9TU0xfVkVSSUZZSE9TVCwgMCk7CiAgICAgICAgICAgICRjb250ZW50ID0gY3VybF9leGVjKCRjaCk7CiAgICAgICAgICAgICRyZXMgPSBaZW5kX0pzb246OmRlY29kZSgkY29udGVudCk7CiAgICAgICAgICAgICRtb2R1bGVzdGF0dXMgPSBuZXcgTWFnZV9Db3JlX01vZGVsX0NvbmZpZygpOwogICAgICAgICAgICAkZW5jID0gTWFnZTo6aGVscGVyKCdjb3JlJyk7ICAgICAgCiAgICAgICAgICAgIGlmKGVtcHR5KCRyZXMpKXsKICAgICAgICAgICAgICAgICRtb2R1bGVzdGF0dXMtPnNhdmVDb25maWcoJ2JpenRlY2hfcHJvZHVjdHByb21vdGlvbi9hY3RpdmF0aW9uL2tleScsICIiKTsKICAgICAgICAgICAgICAgICRtb2R1bGVzdGF0dXMtPnNhdmVDb25maWcoJ2JpenRlY2hfcHJvZHVjdHByb21vdGlvbi9wcm9tb3Rpb25zZXR0aW5ncy9lbmFibGVkJywgMCk7CiAgICAgICAgICAgICAgICAkZGF0YSA9IE1hZ2U6OmdldFN0b3JlQ29uZmlnKCdiaXp0ZWNoX3Byb2R1Y3Rwcm9tb3Rpb24vYWN0aXZhdGlvbi9kYXRhJyk7CiAgICAgICAgICAgICAgICAkZ3JvdXBzID0gYXJyYXkoCiAgICAgICAgICAgICAgICAgICAgJ2FjdGl2YXRpb24nPT5hcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgJ2ZpZWxkcyc9PmFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEnPT5hcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnPT4kZGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3ZWJzaXRlcyc9PmFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZSc9PicnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgTWFnZTo6Z2V0TW9kZWwoJ2FkbWluaHRtbC9jb25maWdfZGF0YScpCiAgICAgICAgICAgICAgICAtPnNldFNlY3Rpb24oJ2JpenRlY2hfcHJvZHVjdHByb21vdGlvbicpCiAgICAgICAgICAgICAgICAtPnNldEdyb3VwcygkZ3JvdXBzKQogICAgICAgICAgICAgICAgLT5zYXZlKCk7CiAgICAgICAgICAgICAgICBNYWdlOjpnZXRDb25maWcoKS0+cmVpbml0KCk7CiAgICAgICAgICAgICAgICBNYWdlOjphcHAoKS0+cmVpbml0U3RvcmVzKCk7ICAKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICAkZGF0YSA9ICcnOwogICAgICAgICAgICAkd2ViICA9ICcnOyAgCiAgICAgICAgICAgICRlbiAgID0gJyc7ICAgCgogICAgICAgICAgICBpZihpc3NldCgkcmVzWydkb20nXSkgJiYgaW50dmFsKCRyZXNbJ2MnXSkgPiAwICYmICBpbnR2YWwoJHJlc1snc3VjJ10pID09IDEpewogICAgICAgICAgICAgICAgJGRhdGEgPSAkZW5jLT5lbmNyeXB0KGJhc2U2NF9lbmNvZGUoWmVuZF9Kc29uOjplbmNvZGUoJHJlcykpKTsKICAgICAgICAgICAgICAgIGlmICghJHMpCiAgICAgICAgICAgICAgICB7IAogICAgICAgICAgICAgICAgICAgICRwYXJhbXMgPSAgTWFnZTo6YXBwKCktPmdldFJlcXVlc3QoKS0+Z2V0UGFyYW0oJ2dyb3VwcycpOwogICAgICAgICAgICAgICAgICAgIGlmKGlzc2V0KCRwYXJhbXNbJ2FjdGl2YXRpb24nXVsnZmllbGRzJ11bJ3dlYnNpdGVzJ11bJ3ZhbHVlJ10pKXsKICAgICAgICAgICAgICAgICAgICAgICAgJHMgPSAkcGFyYW1zWydhY3RpdmF0aW9uJ11bJ2ZpZWxkcyddWyd3ZWJzaXRlcyddWyd2YWx1ZSddOwogICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKE1hZ2U6OmFwcCgpLT5nZXRSZXF1ZXN0KCktPmdldFBhcmFtKCd3ZWJzaXRlJykpewogICAgICAgICAgICAgICAgICAgICAgICAkcyA9IGV4cGxvZGUoJywnLCBzdHJfcmVwbGFjZSgkZGF0YSwgJycsIE1hZ2U6OmhlbHBlcignY29yZScpLT5kZWNyeXB0KE1hZ2U6OmdldFN0b3JlQ29uZmlnKCdiaXp0ZWNoX3Byb2R1Y3Rwcm9tb3Rpb24vYWN0aXZhdGlvbi93ZWJzaXRlcycpKSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRlbiA9ICRyZXNbJ3N1YyddOwogICAgICAgICAgICAgICAgaWYoaXNzZXQoJHMpICYmICRzICE9IG51bGwpewogICAgICAgICAgICAgICAgICAgICR3ZWIgPSAkZW5jLT5lbmNyeXB0KCRkYXRhLmltcGxvZGUoJywnLCAkcykuJGRhdGEpOwogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgJHdlYiA9ICRlbmMtPmVuY3J5cHQoJGRhdGEuJGRhdGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJG1vZHVsZXN0YXR1cy0+c2F2ZUNvbmZpZygnYml6dGVjaF9wcm9kdWN0cHJvbW90aW9uL2FjdGl2YXRpb24va2V5JywgIiIpOwogICAgICAgICAgICAgICAgJG1vZHVsZXN0YXR1cy0+c2F2ZUNvbmZpZygnYml6dGVjaF9wcm9kdWN0cHJvbW90aW9uL3Byb21vdGlvbnNldHRpbmdzL2VuYWJsZWQnLCAwKTsKCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJGdyb3VwcyA9IGFycmF5KAogICAgICAgICAgICAgICAgJ2FjdGl2YXRpb24nPT5hcnJheSgKICAgICAgICAgICAgICAgICAgICAnZmllbGRzJz0+YXJyYXkoCiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhJz0+YXJyYXkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnPT4kZGF0YQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAnd2Vic2l0ZXMnPT5hcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZSc9PihzdHJpbmcpJHdlYgogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAnZW4nPT5hcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZSc9PiRlbgogICAgICAgICAgICAgICAgICAgICAgICApLAoKICAgICAgICAgICAgICAgICAgICAgICAgJ2luc3RhbGxlZCc9PmFycmF5KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJz0+MQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICApOwogICAgICAgICAgICBNYWdlOjpnZXRNb2RlbCgnYWRtaW5odG1sL2NvbmZpZ19kYXRhJykKICAgICAgICAgICAgLT5zZXRTZWN0aW9uKCdiaXp0ZWNoX3Byb2R1Y3Rwcm9tb3Rpb24nKQogICAgICAgICAgICAtPnNldEdyb3VwcygkZ3JvdXBzKQogICAgICAgICAgICAtPnNhdmUoKTsKICAgICAgICAgICAgTWFnZTo6Z2V0Q29uZmlnKCktPnJlaW5pdCgpOwogICAgICAgICAgICBNYWdlOjphcHAoKS0+cmVpbml0U3RvcmVzKCk7ICAKICAgICAgICB9CgogICAgICAgIHB1YmxpYyBmdW5jdGlvbiBnZXREYXRhSW5mbygpCiAgICAgICAgewogICAgICAgICAgICAkZGF0YSA9IE1hZ2U6OmdldFN0b3JlQ29uZmlnKCdiaXp0ZWNoX3Byb2R1Y3Rwcm9tb3Rpb24vYWN0aXZhdGlvbi9kYXRhJyk7CiAgICAgICAgICAgIHJldHVybiBaZW5kX0pzb246OmRlY29kZShiYXNlNjRfZGVjb2RlKE1hZ2U6OmhlbHBlcignY29yZScpLT5kZWNyeXB0KCRkYXRhKSkpOwogICAgICAgIH0KCiAgICAgICAgcHVibGljIGZ1bmN0aW9uIGdldEFsbFdlYnNpdGVzKCl7CgogICAgICAgICAgICBpZighTWFnZTo6Z2V0U3RvcmVDb25maWcoJ2JpenRlY2hfcHJvZHVjdHByb21vdGlvbi9hY3RpdmF0aW9uL2luc3RhbGxlZCcpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXkoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkZGF0YSA9IE1hZ2U6OmdldFN0b3JlQ29uZmlnKCdiaXp0ZWNoX3Byb2R1Y3Rwcm9tb3Rpb24vYWN0aXZhdGlvbi9kYXRhJyk7CiAgICAgICAgICAgICR3ZWIgPSBNYWdlOjpnZXRTdG9yZUNvbmZpZygnYml6dGVjaF9wcm9kdWN0cHJvbW90aW9uL2FjdGl2YXRpb24vd2Vic2l0ZXMnKTsKICAgICAgICAgICAgJHdlYnNpdGVzID0gZXhwbG9kZSgnLCcsIHN0cl9yZXBsYWNlKCRkYXRhLCAnJywgTWFnZTo6aGVscGVyKCdjb3JlJyktPmRlY3J5cHQoJHdlYikpKTsKICAgICAgICAgICAgJHdlYnNpdGVzID0gYXJyYXlfZGlmZigkd2Vic2l0ZXMsIGFycmF5KCIiKSk7CiAgICAgICAgICAgIHJldHVybiAkd2Vic2l0ZXM7CiAgICAgICAgfQoKICAgICAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0Rm9ybWF0VXJsKCR1cmwpCiAgICAgICAgewogICAgICAgICAgICAkaW5wdXQgPSB0cmltKCR1cmwsICcvJyk7CiAgICAgICAgICAgIGlmICghcHJlZ19tYXRjaCgnI15odHRwKHMpPzovLyMnLCAkaW5wdXQpKSB7CiAgICAgICAgICAgICAgICAkaW5wdXQgPSAnaHR0cDovLycgLiAkaW5wdXQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJHVybFBhcnRzID0gcGFyc2VfdXJsKCRpbnB1dCk7CiAgICAgICAgICAgICRkb21haW4gICA9IHByZWdfcmVwbGFjZSgnL153d3dcLi8nLCAnJywgJHVybFBhcnRzWydob3N0J10uJHVybFBhcnRzWydwYXRoJ10pOwogICAgICAgICAgICByZXR1cm4gJGRvbWFpbjsKICAgICAgICB9CgogICAgICAgIHB1YmxpYyBmdW5jdGlvbiBpc0VuYWJsZSgpCiAgICAgICAgeyAgICAgICAgICAgICAgICAKICAgICAgICAgICAgJHdlYnNpdGVJZCA9IE1hZ2U6OmFwcCgpLT5nZXRXZWJzaXRlKCktPmdldElkKCkgOyAKICAgICAgICAgICAgJGlzZW5hYmxlZCA9IE1hZ2U6OmdldFN0b3JlQ29uZmlnKCdiaXp0ZWNoX3Byb2R1Y3Rwcm9tb3Rpb24vcHJvbW90aW9uc2V0dGluZ3MvZW5hYmxlZCcpOwogICAgICAgICAgICBpZigkaXNlbmFibGVkKXsKICAgICAgICAgICAgICAgIGlmKCR3ZWJzaXRlSWQpewogICAgICAgICAgICAgICAgICAgICR3ZWJzaXRlcyA9ICR0aGlzLT5nZXRBbGxXZWJzaXRlcygpOwogICAgICAgICAgICAgICAgICAgICRrZXkgICAgICA9IE1hZ2U6OmdldFN0b3JlQ29uZmlnKCdiaXp0ZWNoX3Byb2R1Y3Rwcm9tb3Rpb24vYWN0aXZhdGlvbi9rZXknKTsKICAgICAgICAgICAgICAgICAgICBpZigka2V5ID09IG51bGwgfHwgJGtleSA9PSAnJykKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgCiAgICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgICRlbiA9IE1hZ2U6OmdldFN0b3JlQ29uZmlnKCdiaXp0ZWNoX3Byb2R1Y3Rwcm9tb3Rpb24vYWN0aXZhdGlvbi9lbicpOwogICAgICAgICAgICAgICAgICAgICAgICBpZigkaXNlbmFibGVkICYmICRlbiAmJiBpbl9hcnJheSgkd2Vic2l0ZUlkLCAkd2Vic2l0ZXMpKQogICAgICAgICAgICAgICAgICAgICAgICB7IHJldHVybiB0cnVlOyB9IGVsc2UgeyByZXR1cm4gZmFsc2U7IH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICRlbiA9IE1hZ2U6OmdldFN0b3JlQ29uZmlnKCdtYWdlbW9icG9zL2FjdGl2YXRpb24vZW4nKTsKICAgICAgICAgICAgICAgICAgICBpZigkaXNlbmFibGVkICYmICRlbil7cmV0dXJuIHRydWU7fQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQp9"));